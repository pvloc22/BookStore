USE Library



-- CREATE DEPARTMENT

GO
CREATE PROC GENERATE_IDDEPARTMENT
    @IDDP VARCHAR(7) OUT
AS
BEGIN
    SET @IDDP = 'DP_001'
    DECLARE @V_FRAME_IDDP VARCHAR(7) = 'DP_'
    DECLARE @I INT = 1

    WHILE(EXISTS(SELECT 1
    FROM DEPARTMENT
    WHERE @IDDP = DPM_ID))
    BEGIN
        SET @IDDP = @V_FRAME_IDDP + REPLICATE('0', 3-LEN(@I)) + CAST(@I AS VARCHAR(3))
        SET @I = @I + 1
    END
END
GO

CREATE PROC INSERT_DEPARTMENT
    @NAME_DP VARCHAR(50)
AS
BEGIN
    BEGIN TRY 
    DECLARE @ID_DP VARCHAR(7)
    EXEC GENERATE_IDDEPARTMENT @ID_DP OUT
    INSERT INTO DEPARTMENT
        (DPM_ID, DPM_NAME)
    VALUES(@ID_DP, @NAME_DP)
    END TRY

    BEGIN CATCH
        RAISERROR('INSERT DEPARTMENT FAILSE!', 16, 1)
    END CATCH
END 
GO
--INSERT BOOK 
CREATE PROC GENERATE_IDBOOK
    @IDBOOK VARCHAR(7) OUT
AS
BEGIN
    SET @IDBOOK = 'BID_001'
    DECLARE @V_FRAME_IDBOOK VARCHAR(7) = 'BID_'
    DECLARE @I INT = 1

    WHILE(EXISTS(SELECT 1
    FROM BOOK
    WHERE @IDBOOK = BID))
    BEGIN
        SET @IDBOOK = @V_FRAME_IDBOOK + REPLICATE('0', 3-LEN(@I)) + CAST(@I AS VARCHAR(3))
        SET @I = @I + 1
    END
END


--INSERT A BOOK
GO
create PROC INSERT_BOOK
    @TITTLE               varchar(50),
    @AUTHOR               varchar(20),
    @PUBLISHINGYEAR       integer    ,
    @GENRE                varchar(20),
    @COUNTRY              varchar(50),
    @LANGUAGE_BOOK        varchar(20),
    @PRICE                float      ,
    @DURATION             integer    ,
    @HASLEFT              integer    ,
    @PATHIMAGE            varchar(50),
    @PAGES                integer
AS
BEGIN
    -- BEGIN TRY 
        
        DECLARE @BID VARCHAR(7)
        EXEC GENERATE_IDBOOK @BID OUT

        INSERT INTO BOOK
        (BID, TITTLE, AUTHOR, PUBLISHINGYEAR, GENRE,COUNTRY, LANGUAGE_BOOK, PRICE, DURATION, HASLEFT, PATHIMAGE, PAGES, STATEBOOK)
    VALUES(@BID, @TITTLE, @AUTHOR, @PUBLISHINGYEAR, @GENRE, @COUNTRY, @LANGUAGE_BOOK, @PRICE, @DURATION, @HASLEFT, @PATHIMAGE, @PAGES, 'TRUE')
    -- END TRY 

    -- BEGIN CATCH
    --     RAISERROR('INSERT BOOK ERRO!', 16, 1)
    -- END CATCH
END



------------------------------------------INSERT USERS
--------------------INSERT CLIENT
GO
CREATE PROC FIND_USER_PASSWORD
    @USERNAME VARCHAR(30)
AS
BEGIN
    BEGIN TRY 
        DECLARE @ID VARCHAR(7) = (SELECT ID
    FROM USERS
    WHERE USERNAME = @USERNAME)

        IF (@ID IS  NULL)
        BEGIN
        RAISERROR('NOT EXISTS USER', 16, 1)
        RETURN
    END

        SELECT *
    FROM ACCOUNT
    WHERE USERNAME = @USERNAME
    END TRY 

    BEGIN CATCH
        RAISERROR('ERROR FIN USER',16,1)
    END CATCH
END

GO
CREATE PROC INSERT_CLIENT
    @ID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        INSERT INTO CLIENT
        (ID)
    VALUES(@ID)
    END TRY 

    BEGIN CATCH
        RAISERROR ('NOT INSER CLIENT', 16, 1)
    END CATCH
END

--------------------INSERT LIBRARIAN
GO
CREATE PROC INSERT_LIBRARIAN
    @ID VARCHAR(7),
    @DPM_ID VARCHAR(7),
    @DEPARTMENT VARCHAR(30)
AS
BEGIN
    BEGIN TRY 
        IF NOT EXISTS(SELECT 1
    FROM DEPARTMENT
    WHERE @DPM_ID = DPM_ID)
        BEGIN
        RAISERROR('DEPARTMENT IS ALDREADY', 16, 1)
        RETURN
    END 

        INSERT INTO LIBRARIAN
        (ID, DPM_ID, DEPARTMENT)
    VALUES(@ID, @DPM_ID, @DEPARTMENT)
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT INSERT LIBRARIAN', 16, 1);
    END CATCH
END 

--------------------INSERT ADMIN
GO
CREATE PROC INSERT_ADMIN
    @ID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        INSERT INTO ADMIN
        (ID)
    VALUES(@ID)
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT INSERT ADMIN', 16, 1);
    END CATCH
END 

--GENERATE ID USER
GO
CREATE PROC GENERATE_IDUSER
    @ID_USER VARCHAR(7) OUT
AS
BEGIN
    BEGIN TRY 
        SET @ID_USER = 'UID_001'
        DECLARE @V_FRAME_USER VARCHAR(7) = 'UID_'
        DECLARE @I INT = 1 


        WHILE(EXISTS(SELECT 1
    FROM USERS
    WHERE ID = @ID_USER))
        BEGIN
        SET @ID_USER = @V_FRAME_USER + REPLICATE('0', 3-LEN(@I)) + CAST(@I AS NVARCHAR(3))
        SET @I = @I +1
    END 
    END TRY

    BEGIN CATCH 
        RAISERROR('NOT GENERATE ID USER', 16, 1)
    END CATCH
END
--INSERT ACCOUT
GO
CREATE PROC INSERT_ACCOUNT
    @ID VARCHAR(7),
    @USERNAME VARCHAR(30),
    @PASS     VARCHAR(200)
AS
BEGIN
    BEGIN TRY
        IF EXISTS(SELECT 1
    FROM ACCOUNT
    WHERE @ID = ID)
        BEGIN
        RAISERROR('ID ALREADY EXISTS', 16,1)
        RETURN
    END
        INSERT INTO ACCOUNT
        (ID, USERNAME, [PASSWORD])
    VALUES(@ID, @USERNAME, @PASS)
    END TRY
    BEGIN CATCH
        RAISERROR('NOT INSERT ACCOUNT', 16, 1)
    END CATCH
END 
GO
CREATE PROC INSERT_USERS
    @USERNAME             varchar(30),
    @PASS                 varchar(200),
    @ADDRESS_U            nvarchar(50),
    @EMAIL                varchar(50),
    @PHONENUMBER          varchar(12),
    @LASTNAME             nvarchar(50),
    @FIRSTNAME            nvarchar(50),
    @TYPE_USER            varchar(30),
    @GENRE                VARCHAR(10)
AS
BEGIN
    -- BEGIN TRY
        IF EXISTS (SELECT *
    FROM USERS
    WHERE USERNAME = @USERNAME)
        BEGIN
        RAISERROR('EXISTS USERNAME', 16,1)
        RETURN
    END
        DECLARE @GETDATE DATETIME = GETDATE()
        DECLARE @ID VARCHAR(7) 
        EXEC GENERATE_IDUSER @ID OUT
        INSERT INTO USERS
        (ID, ADDRESS_U, EMAIL, PHONENUMBER, ISACTIVE, LASTNAME, FIRSTNAME, TYPE_USER, GENRE, CREATEDATE)
    VALUES(@ID, @ADDRESS_U, @EMAIL, @PHONENUMBER, 1, @LASTNAME, @FIRSTNAME, @TYPE_USER, @GENRE, @GETDATE)

        EXEC INSERT_ACCOUNT @ID, @USERNAME, @PASS

        UPDATE USERS
        SET USERNAME = @USERNAME
        WHERE ID = @ID
        
        --INSERT TYPE USER
        IF(@TYPE_USER = 'CLIENT')
            EXEC INSERT_CLIENT @ID
        ELSE IF (@TYPE_USER = 'ADMIN')
            EXEC INSERT_ADMIN @ID
        ELSE
            EXEC INSERT_LIBRARIAN @ID, 'DP_001', 'PHONG THI NGHIEM'
        
    -- END TRY

    -- BEGIN CATCH 
    --     RAISERROR('USER NOT INSERT', 16, 1)
    -- END CATCH
END

--------------------INSERT BOOK FAVORITES
GO
CREATE PROC iNSERT_BOOK_FAVORITES
    @ID VARCHAR(7),
    @BID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        IF EXISTS (SELECT 1
    FROM BOOK
    WHERE BID = @BID)
        BEGIN
        RAISERROR('BOOK ID IS ERRO', 16,1)
        RETURN
    END
        
        IF EXISTS (SELECT 1
    FROM CLIENT
    WHERE ID = @ID)
        BEGIN
        RAISERROR('CLIENT ID IS ERRO', 16,1)
        RETURN
    END

        INSERT INTO FAVORITES
        (ID, BID)
    VALUES(@ID, @BID)
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT INSERT FAVORITES', 16, 1);
    END CATCH
END 

--------------------DELETE FAVORITES
GO
CREATE PROC DELETE_FAVORITES
    @ID VARCHAR(7),
    @BID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        DELETE FROM FAVORITES WHERE ID = @ID AND @BID = BID
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT DELETE FAVORITES', 16, 1);
    END CATCH
END 





---------------------------------------- CLIENT
--------------------/HOME---SEARCH BOOK
GO
CREATE PROC SEARCH_BOOK
    @NAME_BOOK VARCHAR(50)
AS

BEGIN
    BEGIN TRY 
        SELECT *
    FROM BOOK B JOIN T_GENRE G ON G.GENRE_NAME = B.GENRE
    WHERE TITTLE LIKE CONCAT('%', @NAME_BOOK, '%') AND STATEBOOK = 'TRUE' AND G.IS_ACTIVE = 'TRUE'
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT SEARCH BOOK', 16, 1);
    END CATCH
END 

--------------------/HOME---READ LIST BOOK
GO
CREATE PROC READ_BOOK
AS
BEGIN
    BEGIN TRY
        SELECT *
    FROM BOOK
    END TRY

    BEGIN CATCH
        RAISERROR('READ BOOKS ERRO!', 16, 1)
    END CATCH
END
--------------------/HISTORY---READ HISTORY
GO
CREATE PROC READ_HISTORY
    @ID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        SELECT T.TID, B.TITTLE, DT.CURRENTPRICE, T.RETURNINGDATE, T.BORROWEDDATE, B.PATHIMAGE, T.[STATE]
    FROM TRANSACTIONS T JOIN DETAILED_TRANS DT ON T.TID = DT.TID JOIN BOOK B ON B.BID = DT.BID
    WHERE T.CLI_ID = @ID
    ORDER BY T.TID ASC
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT READ HISTORY', 16, 1);
    END CATCH
END 

--------------------/HISTORY--- SEARCH HISTORY
-- GO
-- CREATE PROC FIND_HISTORY
--     @ID VARCHAR(7),
--     @SEARCH VARCHAR(150)
-- AS 
-- BEGIN
--     BEGIN TRY 
--         SELECT * 
--         FROM TRANSACTIONS T JOIN DETAILED_TRANS DT ON T.TID = DT.TID 
--         WHERE T.LI_ID = @ID AND 
--     END TRY 

--     BEGIN CATCH
--         RAISERROR('NOT INSERT LIBRARIAN', 16, 1);
--     END CATCH
-- END 

--------------------/MYINTERESTINGBOOK---READ LIST BOOOK
GO
CREATE PROC READ_FAVORITES
    @ID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        SELECT *
    FROM FAVORITES
    WHERE ID = @ID
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT READ FAVORITES', 16, 1);
    END CATCH
END 

--------------------/VIEWPROFILE-- READ PROFILE
GO
CREATE PROC READ_PROFILE
    @ID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        SELECT *
    FROM USERS U JOIN CLIENT C ON U.ID = C.ID JOIN BANK_ACCOUNT_NUMBER BA ON BA.ID = C.ID
    WHERE U.ID = @ID  
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT READ PROFILE', 16, 1);
    END CATCH
END 

--------------------/VIEWPROFILE--- CHANGE PASSWORD
GO
CREATE PROC CHANGE_PASSWORD_CLIENT
    @ID VARCHAR(7),
    @PASS VARCHAR(200)
AS
BEGIN
    BEGIN TRY 
        IF NOT EXISTS(SELECT 1
    FROM ACCOUNT
    WHERE ID = @ID)
        BEGIN
        RAISERROR('NOT ACCOUNT', 16,1)
        RETURN
    END 

        UPDATE ACCOUNT
        SET [PASSWORD] = @PASS
        WHERE ID = @ID

    END TRY 

    BEGIN CATCH
        RAISERROR('NOT UPDATE CLIENT PASSWORD', 16, 1);
    END CATCH
END 

--------------------/VIEWPROFILE---AUTHENTICATION
GO
CREATE PROC READ_PASSWORD
    @ID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        SELECT [PASSWORD]
    FROM ACCOUNT
    WHERE @ID = ID 
    END TRY 

    BEGIN CATCH
        -- RAISERROR('NOT READ PASSWORD', 16, 1);
    END CATCH
END 
--------------------/AccountUpdate--- Update infomaiton
GO
CREATE PROC UPDATE_INFORMATION_CLIENT
    @ID                   VARCHAR(7),
    @ADDRESS_U            nvarchar(50),
    @EMAIL                varchar(50),
    @PHONENUMBER          varchar(12),
    @LASTNAME             varchar(50),
    @FIRSTNAME            varchar(50),
    @GENRE                VARCHAR(10),
    @BANKID             VARCHAR(150),
    @BANKACCNUM           VARCHAR(15)
AS
BEGIN
    BEGIN TRY 
        IF NOT EXISTS (SELECT 1
    FROM USERS
    WHERE ID = @ID)
        BEGIN
        RAISERROR('NOT HAVE ID USER', 16,1)
        RETURN
    END

    -- UPDATE BANK_ACCOUNT_NUMBER
    -- SET BANKACCNUM = @BANKACCNUM, IDBANK = @BANKID
    -- WHERE ID = @ID

    UPDATE USERS
    SET ADDRESS_U = @ADDRESS_U, EMAIL =@EMAIL, PHONENUMBER = @PHONENUMBER, LASTNAME = @LASTNAME, FIRSTNAME = @FIRSTNAME, GENRE = @GENRE
    WHERE ID = @ID

    END TRY 

    BEGIN CATCH
        RAISERROR('NOT UPDATE INFORMATION CLIENT', 16, 1);
    END CATCH
END 

GO
create PROC INSERT_FAVORITES_BOOK
    @UID VARCHAR(7),
    @BID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        INSERT INTO FAVORITES
        (ID, BID)
    VALUES(@UID, @BID)
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT INSERT FAVORITES', 16, 1);
    END CATCH
END 

GO

create PROC DELETE_FAVORITES_BOOK
    @UID VARCHAR(7),
    @BID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
        DELETE FROM FAVORITES WHERE ID = @UID AND BID = @BID
    END TRY 

    BEGIN CATCH
        RAISERROR('NOT DELETE FAVORITES', 16, 1);
    END CATCH
END 

GO
---------------DETAI_TRAN
CREATE PROC GENERATE_IDTRAN
    @ID_TRAN VARCHAR(7) OUT
AS
BEGIN
    BEGIN TRY 
        SET @ID_TRAN = 'TID_001'
        DECLARE @V_FRAME_USER VARCHAR(7) = 'TID_'
        DECLARE @I INT = 1


        WHILE(EXISTS(SELECT 1
    FROM TRANSACTIONS
    WHERE TID = @ID_TRAN))
        BEGIN
        SET @ID_TRAN = @V_FRAME_USER + REPLICATE('0', 3-LEN(@I)) + CAST(@I AS NVARCHAR(3))
        SET @I = @I + 1
    END 
    END TRY

    BEGIN CATCH 
        RAISERROR('NOT GENERATE ID TRAN', 16, 1)
    END CATCH
END
GO
CREATE PROC INSERT_TRAN
    @UID VARCHAR(7)
AS

BEGIN
    BEGIN TRY 
        DECLARE @TID VARCHAR(7)
        EXEC GENERATE_IDTRAN @TID OUT

        INSERT INTO TRANSACTIONS
        (TID, CLI_ID)
    VALUES(@TID, @UID)
    END TRY 

    BEGIN CATCH
        RAISERROR('Not insert tran',16,1)
    END CATCH
END 

GO
CREATE PROC INSERT_DETAIL_TRAN
    @UID VARCHAR(7),
    @BID VARCHAR(7)
AS

BEGIN
    BEGIN TRY 
        IF NOT EXISTS(SELECT 1
    FROM TRANSACTIONS
    WHERE CLI_ID = @UID AND BORROWEDDATE IS null)
        BEGIN
        EXEC INSERT_TRAN @UID
    END


        DECLARE @TID VARCHAR(7) = (SELECT TID
    FROM TRANSACTIONS
    WHERE CLI_ID = @UID AND BORROWEDDATE IS NULL)
        DECLARE @PRICE_BOOK FLOAT = (SELECT PRICE
    FROM BOOK
    WHERE BID = @BID)
        DECLARE @DURATION_BOOK FLOAT = (SELECT DURATION
    FROM BOOK
    WHERE BID = @BID)

        IF EXISTS(SELECT 1
    FROM DETAILED_TRANS
    WHERE TID = @TID AND BID = @BID)
        BEGIN
        RAISERROR('BOOK IK ALDREADY', 16,1)
        ROLLBACK TRAN
        RETURN
    END

        INSERT INTO DETAILED_TRANS
        (TID, BID, CURRENTPRICE,CURRENTDURATION)
    VALUES(@TID, @BID, @PRICE_BOOK, @DURATION_BOOK)

    END TRY 

    BEGIN CATCH
        RAISERROR('Not insert detail tran',16,1)
    END CATCH
END 
GO
CREATE PROC DELETE_DETAIL_TRAN
    @TID VARCHAR(7),
    @BID VARCHAR(7)
AS

BEGIN
    BEGIN TRY 
        IF NOT EXISTS(SELECT 1
    FROM TRANSACTIONS
    WHERE TID = @TID AND BORROWEDDATE IS null)
        BEGIN
        RAISERROR('transation not exists', 16, 1)
        RETURN
    END

        IF NOT EXISTS(SELECT 1
    FROM TRANSACTIONS T JOIN DETAILED_TRANS D ON D.TID = T.TID
    WHERE D.BID= @BID)
        BEGIN
        RAISERROR('BOOK not exists', 16, 1)
        RETURN
    END
        
        -- DECLARE @TID VARCHAR(7) = (SELECT TID FROM TRANSACTIONS WHERE CLI_ID = @UID AND BORROWEDDATE IS NULL)

        DELETE FROM DETAILED_TRANS WHERE TID = @TID AND BID = @BID

    END TRY 

    BEGIN CATCH
        RAISERROR('Not delete detail tran',16,1)
    END CATCH
END 
--PAY TRANSACTION
GO
CREATE PROC UPDATE_TRANS_PAY
    @TID VARCHAR(7)
AS

BEGIN
    BEGIN TRY 
        IF NOT EXISTS(SELECT 1
    FROM TRANSACTIONS
    WHERE TID = @TID AND BORROWEDDATE IS null)
        BEGIN
        RAISERROR('ERRO', 16,1)
        RETURN
    END

        -- DECLARE @TID VARCHAR(7) = (SELECT TID FROM TRANSACTIONS WHERE CLI_ID = @UID AND BORROWEDDATE IS NULL)
        IF NOT EXISTS (SELECT 1
    FROM DETAILED_TRANS
    WHERE TID = @TID)
        BEGIN
        RAISERROR('NOT pay', 16, 1)
        RETURN
    END 
        DECLARE @TOTALDURATION INT = (SELECT TOTALDURATION
    FROM TRANSACTIONS
    WHERE TID = @TID)
        DECLARE @BORROWDATE DATETIME = GETDATE()
        DECLARE @RETURNDATE DATETIME = @BORROWDATE + @TOTALDURATION 

        UPDATE TRANSACTIONS
        SET BORROWEDDATE = @BORROWDATE, RETURNINGDATE = @RETURNDATE, [STATE] = 'BORROW'
        WHERE TID = @TID
    END TRY 

    BEGIN CATCH
        RAISERROR('Not not pay trans',16,1)
    END CATCH
END

GO
CREATE PROC READ_LIST_TRANS_BORROW
AS
BEGIN
    BEGIN TRY 
        SELECT *
    FROM USERS
    END TRY 

    BEGIN CATCH
        RAISERROR('ERRO READ TRANS', 16, 1)
    END CATCH
END 

GO
CREATE PROC DELETEBOOK
    @BID VARCHAR(7)
AS
BEGIN
    BEGIN TRY 
    IF NOT EXISTS(SELECT 1
    FROM BOOK
    WHERE BID = @BID)
    BEGIN
        RAISERROR('NOT EXISTS BID', 16,1)
        RETURN
    END 
    UPDATE BOOK 
    SET STATEBOOK = 'FALSE'
    WHERE BID = @BID
    END TRY 

    BEGIN CATCH
        RAISERROR('BID IS ERROR!', 16,1)
    END CATCH
END
GO
CREATE PROC UPDATEBOOK
    @BID                  varchar(7) ,
    @TITTLE               varchar(50),
    @AUTHOR               varchar(20),
    @PUBLISHINGYEAR       integer    ,
    @GENRE                varchar(20),
    @LANGUAGE_BOOK        varchar(20),
    @PRICE                float      ,
    @DURATION             integer    ,
    @HASLEFT              integer    ,
    @PAGES                integer
AS
BEGIN
    BEGIN TRY 
            IF NOT EXISTS(SELECT *
    FROM BOOK
    WHERE BID = @BID AND STATEBOOK = 'TRUE')
    BEGIN
        RAISERROR('ERRO BOOK INPUT',16, 1)
        RETURN
    END

    UPDATE BOOK
    SET TITTLE = @TITTLE, AUTHOR = @AUTHOR, PUBLISHINGYEAR = @PUBLISHINGYEAR, 
    GENRE = @GENRE, LANGUAGE_BOOK = @LANGUAGE_BOOK, PRICE = @PRICE,
    DURATION = @DURATION, HASLEFT = @HASLEFT, PAGES = @PAGES
    WHERE BID = @BID
    END TRY 

    BEGIN CATCH
        RAISERROR('ERROR UPDATE BOOK', 16, 1)
    END CATCH
END
GO


EXEC INSERT_USERS 'librarian', '$2b$10$o2Pd88Zpuw0xAyLKkrkjOu/w096V91hpObiyich2Ae1GJyg/7vG1q', N'413/41/14 LÊ VĂN QUỚI', 'pham@gmail.com', '01239123', N'Pham', N'Tuyet', 'LIBRARIAN', 'nam'
EXEC INSERT_USERS 'admin', '$2b$10$o2Pd88Zpuw0xAyLKkrkjOu/w096V91hpObiyich2Ae1GJyg/7vG1q', N'413/41/14 LÊ VĂN QUỚI', 'pham@gmail.com', '01239123', N'Pham', N'Tuyet', 'ADMIN', 'nam'


